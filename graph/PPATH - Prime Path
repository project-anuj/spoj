#include<bits/stdc++.h>
using namespace std;
#define mod 1000000007
#define MAX 100
#define REP(i,n) for(int i=0;i<n;i++)
#define REP1(i,n) for(int i=1;i<=n;i++)
#define rREP(i,n) for(int i=n-1;i>=0;i--)
#define rREP1(i,n) for(int i=n;i>=1;i--)
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;
typedef queue<ii> qii;
typedef queue<int> qi;
typedef long long ll;
vi ar[10001],primes;
int visited[10001];
int dis[10001];

bool isValid(ll a,ll b)
{
	int count=0;
	while(a>0)
	{
		if(a%10!=b%10)
		count++;
		a/=10;
		b/=10;
	}
	if(count==1)
	return true;
	return false;
}

bool isPrime(ll a)
{
	if(a<=1)
	return false;
	for(int i=2;i*i<=a;i++)
	if(a%i==0)
	return false;
	return true;
}

void buildGraph()
{
	for(int i=1000;i<=9999;i++)
	{
		if(isPrime(i))
		{
			primes.push_back(i);
		}
	}
	for(int i=0;i<primes.size();i++)
	{	
		for(int j=i+1;j<primes.size();j++)
		{
			if(isValid(primes[i],primes[j]))
			{
				ar[primes[i]].push_back(primes[j]);
				ar[primes[j]].push_back(primes[i]);
			}
		}
	}
}
void BFS(ll a)
{
	qi q;
	q.push(a);
	visited[a]=1;
	dis[a]=0;
	while(q.size()>0)
	{
		ll x=q.front();
		q.pop();
		for(auto child:ar[x])
		{
			if(visited[child]==0)
			{
				q.push(child);
				dis[child]=dis[x]+1;
				visited[child]=1;
			}
		}
	}
	
}
int main()
{
	ll t;
	cin>>t;
	buildGraph();
	while(t--)
	{	
		ll a,b;
		cin>>a>>b;
		for(int i=0;i<=9999;i++)
		visited[i]=0,dis[i]=-1;
		BFS(a);	
		if(dis[b]==-1)
		cout<<"Impossible"<<endl;
		else
		cout<<dis[b]<<endl;
	}
}
